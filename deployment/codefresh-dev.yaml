version: '1.0'
stages:
- prepare
- build
- unittest
- deploy
- qa
- publish
steps:
  main_clone:
    title: Clone main repository
    type: git-clone
    stage: prepare
    repo: '${{CF_REPO_OWNER}}/${{CF_REPO_NAME}}'
    revision: '${{CF_BRANCH}}'
    git: github

  prepare_deployment_view:
    commands:
    - helm template ./deploy/helm --debug -n ${{NAMESPACE}} --set image.tag=${{NEUROGLANCER_TAG}} -f deploy/values-dev.yaml
    environment:
    - ACTION=auth
    - KUBE_CONTEXT=${{NAMESPACE}}
    image: codefresh/cfstep-helm:3.6.2
    stage: prepare
    title: View helm chart

  build_container_image:
    title: Build Container Image
    type: parallel
    stage: build
    steps:
      neuroglancer:
        type: build
        stage: build
        dockerfile: Dockerfile
        registry: '${{CODEFRESH_REGISTRY}}'
        buildkit: true
        image_name: neuroglancer
        title: Neuroglancer
        working_directory: ./applications/neuroglancer/
        tag: '${{NEUROGLANCER_TAG}}'
        when:
          condition:
            any:
              buildDoesNotExist: includes('${{NEUROGLANCER_TAG_EXISTS}}', '{{NEUROGLANCER_TAG_EXISTS}}')
                == true
              forceNoCache: includes('${{NEUROGLANCER_TAG_FORCE_BUILD}}', '{{NEUROGLANCER_TAG_FORCE_BUILD}}')
                == false

  deployment:
    stage: deploy
    type: helm
    working_directory: ./${{CF_REPO_NAME}}
    title: Installing chart
    arguments:
      helm_version: 3.9.0
      chart_name: deploy/helm
      release_name: '${{NAMESPACE}}'
      kube_context: '${{CLUSTER_NAME}}'
      namespace: '${{NAMESPACE}}'
      chart_version: '${{CF_BUILD_ID}}'
      cmd_ps: --set image.tag=${{NEUROGLANCER_TAG}} --wait --timeout 600s --create-namespace
      custom_value_files:
      - ./deploy/values-dev.yaml
      custom_values: []

  publish:
    type: parallel
    stage: publish
    steps:
      publish_neuroglancer:
        stage: publish
        type: push
        title: Publish Neuroglancer
        candidate: '${{REGISTRY}}/neuroglancer:${{NEUROGLANCER_TAG}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        registry: '${{REGISTRY_PUBLISH_URL}}'
    when:
      condition:
        all:
          whenVarExists: includes("${{DEPLOYMENT_PUBLISH_TAG}}", "{{DEPLOYMENT_PUBLISH_TAG}}")
            == false