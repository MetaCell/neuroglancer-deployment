version: '1.0'
stages:
- prepare
- build
- unittest
- deploy
- qa
- publish
steps:
  main_clone:
    title: Clone main repository
    type: git-clone
    stage: prepare
    repo: MetaCell/neuroglancer-deployment
    revision: czi
    git: github
  post_main_clone:
    title: Post main clone
    type: parallel
    stage: prepare
    steps:
      clone_cloud_harness:
        title: Cloning cloud-harness repository...
        type: git-clone
        stage: prepare
        repo: https://github.com/MetaCell/cloud-harness.git
        revision: '${{CLOUDHARNESS_BRANCH}}'
        working_directory: .
        git: github
      clone_neuroglancer:
        title: Cloning neuroglancer.git repository...
        type: git-clone
        repo: https://github.com/MetaCell/neuroglancer.git
        revision: cryoet-demo
        working_directory: applications/neuroglancer/dependencies/
        git: github
  prepare_deployment:
    title: Prepare helm chart
    image: python:3.12
    stage: prepare
    working_directory: .
    commands:
    - bash cloud-harness/install.sh
    - harness-deployment cloud-harness . -d ${{DOMAIN}} -r ${{REGISTRY}} -rs ${{REGISTRY_SECRET}}
      -n ${{NAMESPACE}} --write-env -e dev -i neuroglancer
    - cat deployment/.env >> ${{CF_VOLUME_PATH}}/env_vars_to_export
    - cat ${{CF_VOLUME_PATH}}/env_vars_to_export
  prepare_deployment_view:
    commands:
    - helm template ./deployment/helm --debug -n ${{NAMESPACE}}
    environment:
    - ACTION=auth
    - KUBE_CONTEXT=${{NAMESPACE}}
    image: codefresh/cfstep-helm:3.6.2
    stage: prepare
    title: View helm chart
  build_base_images:
    title: Build base images
    type: parallel
    stage: build
    steps:
      cloudharness-frontend-build:
        type: build
        stage: build
        dockerfile: infrastructure/base-images/cloudharness-frontend-build/Dockerfile
        registry: '${{CODEFRESH_REGISTRY}}'
        buildkit: true
        build_arguments:
        - DOMAIN=${{DOMAIN}}
        - NOCACHE=${{CF_BUILD_ID}}
        - REGISTRY=${{REGISTRY}}/neuroglancer/
        image_name: neuroglancer/cloudharness-frontend-build
        title: Cloudharness frontend build
        working_directory: ./cloud-harness
        tag: '${{CLOUDHARNESS_FRONTEND_BUILD_TAG}}'
        when:
          condition:
            any:
              buildDoesNotExist: includes('${{CLOUDHARNESS_FRONTEND_BUILD_TAG_EXISTS}}',
                '{{CLOUDHARNESS_FRONTEND_BUILD_TAG_EXISTS}}') == true
              forceNoCache: includes('${{CLOUDHARNESS_FRONTEND_BUILD_TAG_FORCE_BUILD}}',
                '{{CLOUDHARNESS_FRONTEND_BUILD_TAG_FORCE_BUILD}}') == false
  build_application_images:
    type: parallel
    stage: build
    steps:
      neuroglancer:
        type: build
        stage: build
        dockerfile: Dockerfile
        registry: '${{CODEFRESH_REGISTRY}}'
        buildkit: true
        build_arguments:
        - DOMAIN=${{DOMAIN}}
        - NOCACHE=${{CF_BUILD_ID}}
        - REGISTRY=${{REGISTRY}}/neuroglancer/
        - CLOUDHARNESS_FRONTEND_BUILD=${{REGISTRY}}/neuroglancer/cloudharness-frontend-build:${{CLOUDHARNESS_FRONTEND_BUILD_TAG}}
        image_name: neuroglancer/neuroglancer
        title: Neuroglancer
        working_directory: ./applications/neuroglancer
        tag: '${{NEUROGLANCER_TAG}}'
        when:
          condition:
            any:
              buildDoesNotExist: includes('${{NEUROGLANCER_TAG_EXISTS}}', '{{NEUROGLANCER_TAG_EXISTS}}')
                == true
              forceNoCache: includes('${{NEUROGLANCER_TAG_FORCE_BUILD}}', '{{NEUROGLANCER_TAG_FORCE_BUILD}}')
                == false
  deployment:
    stage: deploy
    type: helm
    working_directory: ./${{CF_REPO_NAME}}
    title: Installing chart
    arguments:
      helm_version: 3.6.2
      chart_name: deployment/helm
      release_name: '${{NAMESPACE}}'
      kube_context: '${{CLUSTER_NAME}}'
      namespace: '${{NAMESPACE}}'
      chart_version: '${{CF_BUILD_ID}}'
      cmd_ps: --wait --timeout 600s --create-namespace
      custom_value_files:
      - ./deployment/helm/values.yaml
      custom_values: []
  approval:
    type: pending-approval
    stage: publish
    title: Approve build
    description: Approve build release and tagging
    timeout:
      duration: 168
      finalState: denied
  publish:
    type: parallel
    stage: publish
    steps:
      publish_cloudharness-frontend-build:
        stage: publish
        type: push
        title: Cloudharness frontend build
        candidate: '${{REGISTRY}}/neuroglancer/cloudharness-frontend-build:${{CLOUDHARNESS_FRONTEND_BUILD_TAG}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_neuroglancer:
        stage: publish
        type: push
        title: Neuroglancer
        candidate: '${{REGISTRY}}/neuroglancer/neuroglancer:${{NEUROGLANCER_TAG}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        registry: '${{REGISTRY_PUBLISH_URL}}'
    when:
      condition:
        all:
          whenVarExists: includes("${{DEPLOYMENT_PUBLISH_TAG}}", "{{DEPLOYMENT_PUBLISH_TAG}}")
            == false
